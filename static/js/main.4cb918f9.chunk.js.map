{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","userId","classNames","TodoList","todos","map","getUserById","usersFromServer","find","App","useState","visibleTodos","setVisibleTodos","setTitle","selectedUser","setSelectedUser","isTitleEmpty","setIsTitleEmpty","userIsntSelected","setUserIsntSelected","action","method","onSubmit","event","preventDefault","trim","newTodoId","Math","max","getNewTodoId","newTodo","type","placeholder","value","onChange","target","replace","disabled","ReactDOM","render","document","getElementById"],"mappings":"qNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,uBCrDEC,EAAoC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAC1CJ,EAAgBI,EAAhBJ,KAAME,EAAUE,EAAVF,MAEd,OACE,mBAAGG,UAAU,WAAWC,KAAI,iBAAYJ,GAAxC,SACGF,KCHMO,EAAoC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAEhDJ,EAIEI,EAJFJ,KACAK,EAGED,EAHFC,MACAC,EAEEF,EAFFE,UACAC,EACEH,EADFG,OAGF,OACE,0BACE,UAASA,EAETN,UAAWO,IACT,WACA,CACE,sBAAuBF,IAN7B,UAUE,oBAAIL,UAAU,kBAAd,SAAiCI,IAEhCL,GAAQ,cAAC,EAAD,CAAUA,KAAMA,MAVpBO,ICZEE,EAAoC,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAC/C,yBAAST,UAAU,WAAnB,SACGS,EAAMC,KAAI,SAAAP,GAAI,OACb,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKT,UCFtC,SAASiB,EAAYjB,GAGnB,OAFkBkB,EAAgBC,MAAK,SAAAd,GAAI,OAAIA,EAAKL,KAAOA,MAEvC,KAGtB,IAAMe,ECdS,CACb,CACEf,GAAI,EACJU,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEZ,GAAI,EACJU,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEZ,GAAI,EACJU,MAAO,qCACPC,WAAW,EACXC,OAAQ,IDH0BI,KAAI,SAAAP,GAAI,kCACzCA,GADyC,IAE5CJ,KAAMY,EAAYR,EAAKG,aAOZQ,EAAM,WACjB,MAAwCC,mBAASN,GAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KACA,EAA0BF,mBAAS,IAAnC,mBAAOX,EAAP,KAAcc,EAAd,KACA,EAAwCH,mBAAsB,MAA9D,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAwCL,oBAAS,GAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAAgDP,oBAAS,GAAzD,mBAAOQ,EAAP,KAAyBC,EAAzB,KA4CA,OACE,sBAAKxB,UAAU,MAAf,UACE,+CAEA,uBACEyB,OAAO,aACPC,OAAO,OACPC,SAvCe,SAACC,GAWpB,GAVAA,EAAMC,iBAEDV,GACHK,GAAoB,GAGjBpB,EAAM0B,QACTR,GAAgB,GAGdlB,EAAM0B,QAAUX,EAAc,CAChC,IAAMY,EAjCS,SAACf,GACpB,OAAOgB,KAAKC,IAAL,MAAAD,KAAI,YAAQhB,EAAaN,KAAI,SAAAP,GAAI,OAAIA,EAAKT,QAAO,EAgClCwC,CAAalB,GAEzBmB,EAAU,CACdzC,GAAIqC,EACJzB,OAAQa,EAAeA,EAAazB,IAAM,EAC1CU,QACAC,WAAW,EACXN,KAAMoB,GAGRF,EAAgB,GAAD,mBACVD,GADU,CAEbmB,KAGFf,EAAgB,MAChBF,EAAS,MAQT,UAKE,sBAAKlB,UAAU,QAAf,UACE,2CAGE,uBACEoC,KAAK,OACL,UAAQ,aACRC,YAAY,gBACZC,MAAOlC,EACPmC,SA5Dc,SAACX,GACzBV,EAASU,EAAMY,OAAOF,MAAMG,QAAQ,4CAAyB,KAC7DnB,GAAgB,SA8DTD,GACC,sBAAMrB,UAAU,QAAhB,qCAMJ,sBAAKA,UAAU,QAAf,UACE,0CAGE,yBACE,UAAQ,aACRsC,OAAmB,OAAZnB,QAAY,IAAZA,OAAA,EAAAA,EAAczB,KAAM,EAC3B6C,SAzEa,SAACX,GACxBR,EAAgBT,GAAaiB,EAAMY,OAAOF,QAC1Cd,GAAoB,IAoEZ,UAKE,wBAAQc,MAAM,IAAII,UAAQ,EAA1B,2BACC9B,EAAgBF,KAAI,SAACX,GAAD,OACnB,wBAAsBuC,MAAOvC,EAAKL,GAAlC,SACGK,EAAKJ,MADKI,EAAKL,aAOvB6B,GACC,sBAAMvB,UAAU,QAAhB,qCAMJ,wBAAQoC,KAAK,SAAS,UAAQ,eAA9B,oBAIF,oBAAIpC,UAAU,aAAd,kCAEA,cAAC,EAAD,CAAUS,MAAOO,QEjIvB2B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4cb918f9.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ntype UserInfoProps = {\n  user: User;\n};\n\nexport const UserInfo: React.FC<UserInfoProps> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype TodoInfoProps = {\n  todo: Todo;\n};\n\nexport const TodoInfo: React.FC<TodoInfoProps> = ({ todo }) => {\n  const {\n    user,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  return (\n    <article\n      data-id={userId}\n      key={userId}\n      className={classNames(\n        'TodoInfo',\n        {\n          'TodoInfo--completed': completed,\n        },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList: React.FC<TodoListProps> = ({ todos }) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo todo={todo} key={todo.id} />\n    ))}\n  </section>\n);\n","import './App.scss';\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { User } from './types/User';\nimport { Todo } from './types/Todo';\n\nfunction getUserById(id: number): User | null {\n  const foundUser = usersFromServer.find(user => user.id === id);\n\n  return foundUser || null;\n}\n\nconst todos: Todo[] = todosFromServer.map(todo => ({\n  ...todo,\n  user: getUserById(todo.userId),\n}));\n\nconst getNewTodoId = (visibleTodos: Todo[]) => {\n  return Math.max(...visibleTodos.map(todo => todo.id)) + 1;\n};\n\nexport const App = () => {\n  const [visibleTodos, setVisibleTodos] = useState(todos);\n  const [title, setTitle] = useState('');\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isTitleEmpty, setIsTitleEmpty] = useState(false);\n  const [userIsntSelected, setUserIsntSelected] = useState(false);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(/[^a-zA-Zа-яА-Я0-9\\s]/g, ''));\n    setIsTitleEmpty(false);\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedUser(getUserById(+event.target.value));\n    setUserIsntSelected(false);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    if (!selectedUser) {\n      setUserIsntSelected(true);\n    }\n\n    if (!title.trim()) {\n      setIsTitleEmpty(true);\n    }\n\n    if (title.trim() && selectedUser) {\n      const newTodoId = getNewTodoId(visibleTodos);\n\n      const newTodo = {\n        id: newTodoId,\n        userId: selectedUser ? selectedUser.id : -1,\n        title,\n        completed: false,\n        user: selectedUser,\n      };\n\n      setVisibleTodos([\n        ...visibleTodos,\n        newTodo,\n      ]);\n\n      setSelectedUser(null);\n      setTitle('');\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label>\n            Title:\n\n            <input\n              type=\"text\"\n              data-cy=\"titleInput\"\n              placeholder=\"Enter a title\"\n              value={title}\n              onChange={handleTitleChange}\n            />\n          </label>\n\n          {isTitleEmpty && (\n            <span className=\"error\">\n              Please enter a title\n            </span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <label>\n            User:\n\n            <select\n              data-cy=\"userSelect\"\n              value={selectedUser?.id || 0}\n              onChange={handleUserChange}\n            >\n              <option value=\"0\" disabled>Choose a user</option>\n              {usersFromServer.map((user) => (\n                <option key={user.id} value={user.id}>\n                  {user.name}\n                </option>\n              ))}\n            </select>\n          </label>\n\n          {userIsntSelected && (\n            <span className=\"error\">\n              Please choose a user\n            </span>\n          )}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <h1 className=\"App__title\">Static list of todos</h1>\n\n      <TodoList todos={visibleTodos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 5,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}